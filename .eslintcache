[{"C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\index.js":"1","C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\App.js":"2","C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\footer.js":"3","C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\appbody\\body.js":"4","C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\topbar\\topbar.js":"5","C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\Learning.js":"6","C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\dashboard.js":"7","C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\appbody\\main\\main.js":"8","C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\topbar\\logo.js":"9","C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\topbar\\controlPanel.js":"10","C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\appbody\\main\\recognizing.js":"11","C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\appbody\\main\\files.js":"12","C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\appbody\\main\\stats.js":"13","C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\appbody\\main\\terminal.js":"14","C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\topbar\\popover.js":"15"},{"size":232,"mtime":1607631925379,"results":"16","hashOfConfig":"17"},{"size":3121,"mtime":1608232558511,"results":"18","hashOfConfig":"17"},{"size":874,"mtime":1607631925371,"results":"19","hashOfConfig":"17"},{"size":1261,"mtime":1607631925363,"results":"20","hashOfConfig":"17"},{"size":1065,"mtime":1608222823798,"results":"21","hashOfConfig":"17"},{"size":344,"mtime":1607631925363,"results":"22","hashOfConfig":"17"},{"size":2542,"mtime":1607631925367,"results":"23","hashOfConfig":"17"},{"size":852,"mtime":1607631925367,"results":"24","hashOfConfig":"17"},{"size":560,"mtime":1607631925371,"results":"25","hashOfConfig":"17"},{"size":1258,"mtime":1608229146472,"results":"26","hashOfConfig":"17"},{"size":358,"mtime":1607631925367,"results":"27","hashOfConfig":"17"},{"size":343,"mtime":1607631925367,"results":"28","hashOfConfig":"17"},{"size":304,"mtime":1607631925367,"results":"29","hashOfConfig":"17"},{"size":293,"mtime":1607631925367,"results":"30","hashOfConfig":"17"},{"size":5629,"mtime":1608225249861,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"7oxpae",{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"34"},"C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\index.js",[],["69","70"],"C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\App.js",["71","72","73"],"C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\footer.js",[],"C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\appbody\\body.js",["74","75","76","77"],"import {Label, Pane, Textarea} from \"evergreen-ui\";\r\nimport { useState, useEffect} from \"react\";\r\nimport Dashboard from \"../dashboard\";\r\nimport Main from \"./main/main\"\r\nimport Learning from \"../Learning\"\r\n\r\nfunction AppBody(){\r\n\r\n    let initialDashboardState = [\r\n        {\r\n            name: \"MQTT\",\r\n            value: \"DISABLED\",\r\n            details: \"MQTT Broker is running properly\"\r\n        },\r\n        {\r\n            name: \"Data\",\r\n            value: \"DISABLED\",\r\n            details: \"MQTT Broker is running properly\"\r\n        },\r\n        {\r\n            name: \"ONLINE\",\r\n            value: \"DISABLED\",\r\n            details: \"MQTT Broker is running properly\"\r\n        },\r\n        {\r\n            name: \"Learning\",\r\n            value: \"DISABLED\",\r\n            details: \"MQTT Broker is running properly\"\r\n        }\r\n    ]\r\n\r\n    const [DashboardState, setDasboardState] = useState(initialDashboardState);\r\n\r\n    return(\r\n        <Pane\r\n        display={\"flex\"}\r\n        flexDirection={\"column\"}\r\n        margin={\"auto\"}\r\n        width={\"1200px\"}\r\n        justifyContent={\"space-between\"}\r\n        >\r\n\r\n            <Dashboard elements={DashboardState}/>\r\n            <Main/>\r\n            <Learning />\r\n\r\n        </Pane>\r\n    )\r\n}\r\n\r\nexport default AppBody;","C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\topbar\\topbar.js",["78","79"],"import {Button, Pane, Popover} from \"evergreen-ui\";\r\nimport Logo from \"./logo\"\r\nimport ControlPanel from \"./controlPanel\";\r\n\r\nfunction Topbar(props) {\r\n    return(\r\n        <Pane\r\n            width=\"100%\"\r\n            height={50}\r\n            border=\"default\"\r\n            paddingX=\"50px\"\r\n        >\r\n            <Pane\r\n                margin=\"auto\"\r\n                maxWidth=\"1200px\"\r\n\r\n                height=\"100%\"\r\n                display=\"flex\"\r\n                justifyContent=\"space-between\"\r\n                alignItems=\"center\"\r\n            >\r\n                <Logo />\r\n\r\n                <ControlPanel connectionStateNumber={props.serverState.num}\r\n                              connectToBroker={props.cn}\r\n                              disconnectFromBroker={props.dc}\r\n                              setSettings={props.setSettings}\r\n                              settings={props.serverState}\r\n                              sendTestMessage={props.sendTestMessage}\r\n                />\r\n            </Pane>\r\n\r\n        </Pane>\r\n    )\r\n}\r\n\r\nexport default Topbar;","C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\Learning.js",[],"C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\dashboard.js",["80","81"],"import {Pane, Text, Popover, Label} from \"evergreen-ui\";\r\nimport {TickCircleIcon, DeleteIcon} from \"evergreen-ui\"\r\n\r\n\r\nfunction Item(props){\r\n\r\n\r\n        return(\r\n            <Popover\r\n                bringFocusInside\r\n                trigger={\"hover\"}\r\n                content={\r\n                    <Pane\r\n                        height={40}\r\n                        paddingX={10}\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        flexDirection=\"column\"\r\n                    >\r\n                        <Text>some text</Text>\r\n                    </Pane>\r\n                }\r\n            >\r\n                <Pane\r\n                    display={\"flex\"}\r\n                    alignItems={\"center\"}\r\n                    justifyContent={\"space-between\"}\r\n                >\r\n                    {(props.value === \"OK\")?\r\n                        <TickCircleIcon color={\"success\"} size={\"20px\"}/>:\r\n                        <DeleteIcon color={\"danger\"} size={\"20px\"}/>\r\n                    }\r\n\r\n                    <Text\r\n                        fontWeight={\"900\"}\r\n                        textTransform={\"uppercase\"}\r\n                        marginLeft={\"10px\"}\r\n                    >\r\n                        {props.text}\r\n                    </Text>\r\n\r\n                </Pane>\r\n            </Popover>\r\n\r\n        )\r\n    }\r\n\r\n\r\nfunction Dashboard(props){\r\n\r\n    let elements = [\r\n        {\r\n            name: \"MQTT\",\r\n            value: \"OK\",\r\n            details: \"MQTT Broker is running properly\"\r\n        },\r\n        {\r\n            name: \"Data\",\r\n            value: \"OK\",\r\n            details: \"MQTT Broker is running properly\"\r\n        },\r\n        {\r\n            name: \"ONLINE\",\r\n            value: \"OK\",\r\n            details: \"MQTT Broker is running properly\"\r\n        },\r\n        {\r\n            name: \"Learning\",\r\n            value: \"DISABLED\",\r\n            details: \"MQTT Broker is running properly\"\r\n        }\r\n    ]\r\n\r\n\r\n    const MYItems = props.elements.map((elmnt) => {\r\n            return <Item text={elmnt.name} value={elmnt.value} details={elmnt.details}/>\r\n        }\r\n    );\r\n\r\n    return(\r\n        <Pane\r\n            width={\"100%\"}\r\n            height={\"60px\"}\r\n            border={\"default\"}\r\n            display={\"flex\"}\r\n            justifyContent={\"space-between\"}\r\n            paddingX={\"50px\"}\r\n            marginY={\"40px\"}\r\n        >\r\n\r\n            {MYItems}\r\n        </Pane>\r\n    )\r\n\r\n}\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\appbody\\main\\main.js",[],"C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\topbar\\logo.js",[],"C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\topbar\\controlPanel.js",["82"],"import {Pane, Button, Badge} from \"evergreen-ui\";\r\nimport ClientSettingsPopover from \"./popover\";\r\nimport {useState, useEffect} from \"react\";\r\n\r\n\r\nlet badgeStates = {\r\n    NotConnected: {\r\n        color: \"neutral\",\r\n        text: \"Not Connected\"\r\n    },\r\n    Connected: {\r\n        color: \"green\",\r\n        text: \"Connected\"\r\n    }\r\n    ,\r\n    Error: {\r\n        color: \"red\",\r\n        text: \"Error\"\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction ControlPanel(props) {\r\n    const [connectionStateBadge, setConnectionStateBadge] = useState(badgeStates.NotConnected);\r\n\r\n    useEffect(()=>{\r\n        setConnectionStateBadge(badgeStates[props.settings.state]);\r\n    })\r\n\r\n    return (\r\n        <Pane\r\n            display=\"flex\"\r\n            justifyContent={\"space-between\"}\r\n            alignItems={\"center\"}\r\n        >\r\n\r\n            <Badge\r\n                color={connectionStateBadge.color}\r\n            >\r\n                {connectionStateBadge.text}\r\n            </Badge>\r\n\r\n            <ClientSettingsPopover disconnectFromBroker={props.disconnectFromBroker} connectToBroker={props.connectToBroker} clientState={props.settings} />\r\n            <Button onClick={() => {props.sendTestMessage(\"guiCommands\", \"TEST\")}}/>\r\n\r\n\r\n        </Pane>\r\n    )\r\n}\r\n\r\nexport default ControlPanel;","C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\appbody\\main\\recognizing.js",[],"C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\appbody\\main\\files.js",[],"C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\appbody\\main\\stats.js",[],"C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\appbody\\main\\terminal.js",["83"],"import {Text, Pane, Label} from \"evergreen-ui\";\r\n\r\nfunction Terminal(){\r\n    return(\r\n        <Pane\r\n            minWidth={\"400px\"}\r\n            height={\"100%\"}\r\n            border={\"default\"}\r\n        >\r\n            <Text>Terminal</Text>\r\n        </Pane>\r\n    )\r\n}\r\n\r\nexport default Terminal;","C:\\Users\\boolm\\Desktop\\Limbo_React\\src\\Components\\topbar\\popover.js",["84","85","86","87","88","89","90","91","92"],"import {Button, Pane, Popover, Text, Autocomplete, TextInput, TextInputField, ArrowRightIcon, CrossIcon, SmallTickIcon, LinkIcon, Checkbox} from \"evergreen-ui\";\r\nimport {CogIcon} from \"evergreen-ui\"\r\nimport { useEffect, useState} from 'react'\r\nimport \"./topbar.css\"\r\n\r\nconst buttonStates = {\r\n    NotConnected:{\r\n        intent:\"success\",\r\n        text:\"Connect to broker\",\r\n    },\r\n    Connected:{\r\n        intent:\"danger\",\r\n        text:\"Disconnect from broker\"\r\n    }\r\n}\r\n\r\nfunction returnURL(ip, port, path, ssl = false){\r\n    if(ssl){\r\n        return \"wss://\".concat(ip).concat(\":\").concat(port).concat(\"/\").concat(path);\r\n    }\r\n    else{\r\n        return \"ws://\".concat(ip).concat(\":\").concat(port).concat(\"/\").concat(path);\r\n\r\n    }\r\n}\r\n\r\n\r\nfunction ClientSettingsPopover(props) {\r\n\r\n\r\n\r\n    const [brokerIP, setInputBrokerIP] = useState('localhost');\r\n    const [clientId, setInputClientId] = useState('GUI_Client');\r\n    const [port, setInputPort] = useState(\"8083\");\r\n    const [inputSSL, setInputSSL] = useState({checked:false});\r\n    const [inputSth, setInputSth] = useState({checked:false});\r\n    const [buttonAppearance, setButtonAppearance] = useState({intent: \"success\", text:\"Connect to broker\"})\r\n\r\n\r\n    useEffect(() =>{\r\n        setButtonAppearance(buttonStates[props.clientState.state])\r\n    })\r\n\r\n    function renderButton(){\r\n        if(props.clientState.connected)\r\n            return (\r\n                <Button\r\n                    appearance=\"primary\"\r\n                    onClick={props.disconnectFromBroker}\r\n                    intent=\"warning\"\r\n                    textAlign={\"center\"}\r\n\r\n                    iconAfter={LinkIcon}\r\n                    marginY={10}\r\n                >\r\n                    Disconnect\r\n                </Button>)\r\n        return (\r\n        <Button\r\n            appearance=\"primary\"\r\n            onClick={() => props.connectToBroker(returnURL(brokerIP, port, \"mqtt\"), clientId, inputSSL.checked)}\r\n            intent=\"success\"\r\n            textAlign={\"center\"}\r\n\r\n            iconAfter={LinkIcon}\r\n            marginY={10}\r\n        >\r\n            Connect\r\n        </Button>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <Popover\r\n\r\n            shouldCloseOnExternalClick={true}\r\n            content={({close}) => (\r\n\r\n                <Pane\r\n                    paddingX={20}\r\n                    paddingY={20}\r\n                    display=\"flex\"\r\n                    alignItems=\"center\"\r\n                    justifyContent=\"center\"\r\n                    flexDirection=\"column\"\r\n                >\r\n\r\n                    <Pane\r\n                        display={\"flex\"}\r\n\r\n\r\n                    >\r\n                        <TextInputField\r\n                            label=\"Broker IP\"\r\n                            placeholder=\"e.g. 192.168.1.170\"\r\n                            marginRight={\"10px\"}\r\n                            width={\"210px\"}\r\n                            marginY={10}\r\n                            value={brokerIP}\r\n                            onChange={(e)=> {setInputBrokerIP(e.target.value)}}\r\n                        />\r\n\r\n                        <TextInputField\r\n                            label=\"Port\"\r\n                            width={\"100px\"}\r\n                            placeholder=\"e.g. 8083\"\r\n                            value={port}\r\n                            marginY={10}\r\n                            onChange={(e)=> {setInputPort(e.target.value)}}\r\n                        />\r\n                    </Pane>\r\n\r\n                    <TextInputField\r\n                        label=\"Client ID\"\r\n                        hint=\"This needs to be an unique identifier.\"\r\n                        placeholder=\"For example: GUI_Client\"\r\n                        alignSelf={\"flex-start\"}\r\n                        width={\"100%\"}\r\n                        marginY={10}\r\n                        value={clientId}\r\n                        onChange={(e)=> {setInputClientId(e.target.value)}}\r\n                    />\r\n\r\n\r\n                    <Pane\r\n                        display={\"flex\"}\r\n                        justifyContent={\"space-between\"}\r\n                        width={\"100%\"}\r\n                        marginY={\"5px\"}\r\n                    >\r\n                        <Checkbox\r\n                            marginY={10}\r\n                            alignSelf={\"flex-start\"}\r\n                            label=\"Use Secure Sockets Layer (SSL)\"\r\n                            checked={inputSSL.checked}\r\n\r\n                            onChange={e => setInputSSL({ checked: e.target.checked })}\r\n                        />\r\n\r\n                        <Checkbox\r\n                            marginY={10}\r\n                            alignSelf={\"flex-start\"}\r\n                            checked={inputSth.checked}\r\n                            label=\"Use sth\"\r\n                            onChange={e => setInputSth({ checked: e.target.checked })}\r\n                        />\r\n                    </Pane>\r\n\r\n                    <Pane\r\n                        display={\"flex\"}\r\n                    >\r\n                        {renderButton()}\r\n                    </Pane>\r\n                    <Button\r\n\r\n                        onClick={close}\r\n\r\n                    >\r\n                        Close\r\n                    </Button>\r\n\r\n                </Pane>\r\n            )}\r\n            shouldCloseOnExternalClick={true}\r\n        >\r\n            <Button\r\n                iconAfter={CogIcon}\r\n                marginLeft={10}\r\n            >\r\n                MQTT Broker Settings\r\n            </Button>\r\n\r\n        </Popover>\r\n    )\r\n}\r\n\r\nexport default ClientSettingsPopover;",{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":1,"column":20,"nodeType":"99","messageId":"100","endLine":1,"endColumn":28},{"ruleId":"97","severity":1,"message":"101","line":1,"column":30,"nodeType":"99","messageId":"100","endLine":1,"endColumn":39},{"ruleId":"97","severity":1,"message":"102","line":7,"column":9,"nodeType":"99","messageId":"100","endLine":7,"endColumn":19},{"ruleId":"97","severity":1,"message":"103","line":1,"column":9,"nodeType":"99","messageId":"100","endLine":1,"endColumn":14},{"ruleId":"97","severity":1,"message":"104","line":1,"column":22,"nodeType":"99","messageId":"100","endLine":1,"endColumn":30},{"ruleId":"97","severity":1,"message":"101","line":2,"column":20,"nodeType":"99","messageId":"100","endLine":2,"endColumn":29},{"ruleId":"97","severity":1,"message":"105","line":32,"column":28,"nodeType":"99","messageId":"100","endLine":32,"endColumn":44},{"ruleId":"97","severity":1,"message":"106","line":1,"column":9,"nodeType":"99","messageId":"100","endLine":1,"endColumn":15},{"ruleId":"97","severity":1,"message":"107","line":1,"column":23,"nodeType":"99","messageId":"100","endLine":1,"endColumn":30},{"ruleId":"97","severity":1,"message":"103","line":1,"column":30,"nodeType":"99","messageId":"100","endLine":1,"endColumn":35},{"ruleId":"97","severity":1,"message":"108","line":52,"column":9,"nodeType":"99","messageId":"100","endLine":52,"endColumn":17},{"ruleId":"109","severity":1,"message":"110","line":27,"column":5,"nodeType":"99","endLine":27,"endColumn":14,"suggestions":"111"},{"ruleId":"97","severity":1,"message":"103","line":1,"column":21,"nodeType":"99","messageId":"100","endLine":1,"endColumn":26},{"ruleId":"97","severity":1,"message":"112","line":1,"column":32,"nodeType":"99","messageId":"100","endLine":1,"endColumn":36},{"ruleId":"97","severity":1,"message":"113","line":1,"column":38,"nodeType":"99","messageId":"100","endLine":1,"endColumn":50},{"ruleId":"97","severity":1,"message":"114","line":1,"column":52,"nodeType":"99","messageId":"100","endLine":1,"endColumn":61},{"ruleId":"97","severity":1,"message":"115","line":1,"column":79,"nodeType":"99","messageId":"100","endLine":1,"endColumn":93},{"ruleId":"97","severity":1,"message":"116","line":1,"column":95,"nodeType":"99","messageId":"100","endLine":1,"endColumn":104},{"ruleId":"97","severity":1,"message":"117","line":1,"column":106,"nodeType":"99","messageId":"100","endLine":1,"endColumn":119},{"ruleId":"97","severity":1,"message":"118","line":37,"column":12,"nodeType":"99","messageId":"100","endLine":37,"endColumn":28},{"ruleId":"109","severity":1,"message":"119","line":40,"column":5,"nodeType":"99","endLine":40,"endColumn":14,"suggestions":"120"},{"ruleId":"121","severity":1,"message":"122","line":164,"column":13,"nodeType":"123","endLine":164,"endColumn":46},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'MqttClient' is defined but never used.","'Label' is defined but never used.","'Textarea' is defined but never used.","'setDasboardState' is assigned a value but never used.","'Button' is defined but never used.","'Popover' is defined but never used.","'elements' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setConnectionStateBadge'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.settings.state] as a second argument to the useEffect Hook.",["126"],"'Text' is defined but never used.","'Autocomplete' is defined but never used.","'TextInput' is defined but never used.","'ArrowRightIcon' is defined but never used.","'CrossIcon' is defined but never used.","'SmallTickIcon' is defined but never used.","'buttonAppearance' is assigned a value but never used.","React Hook useEffect contains a call to 'setButtonAppearance'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.clientState.state] as a second argument to the useEffect Hook.",["127"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},"Add dependencies array: [props.settings.state]",{"range":"132","text":"133"},"Add dependencies array: [props.clientState.state]",{"range":"134","text":"135"},[641,641],", [props.settings.state]",[1314,1314],", [props.clientState.state]"]